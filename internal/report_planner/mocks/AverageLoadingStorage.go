// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AverageLoadingStorage is an autogenerated mock type for the AverageLoadingStorage type
type AverageLoadingStorage struct {
	mock.Mock
}

// GetAverageLoadingTime provides a mock function with given fields: ctx, reportName
func (_m *AverageLoadingStorage) GetAverageLoadingTime(ctx context.Context, reportName string) (time.Duration, error) {
	ret := _m.Called(ctx, reportName)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageLoadingTime")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (time.Duration, error)); ok {
		return rf(ctx, reportName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, reportName)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reportName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAverageLoadingStorage creates a new instance of AverageLoadingStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAverageLoadingStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *AverageLoadingStorage {
	mock := &AverageLoadingStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
